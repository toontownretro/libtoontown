/*
// Filename: lexer.l
// Created by:  shochet (25May00)
//
////////////////////////////////////////////////////////////////////
*/

%{
#include "lexerDefs.h"
#include "parserDefs.h"
#include "parser.hxx"

#include "indent.h"
#include "pnotify.h"

#include <math.h>
#include "toontownbase.h"

extern "C" int dnayywrap(void);  // declared below.

static int yyinput(void);        // declared by flex.


////////////////////////////////////////////////////////////////////
// Static variables
////////////////////////////////////////////////////////////////////

// We'll increment line_number and col_number as we parse the file, so
// that we can report the position of an error.
static int line_number = 0;
static int col_number = 0;

// current_line holds as much of the current line as will fit.  Its
// only purpose is for printing it out to report an error to the user.
static const int max_error_width = 1024;
static char current_line[max_error_width + 1];

static int error_count = 0;
static int warning_count = 0;

// This is the pointer to the current input stream.
static std::istream *inp = NULL;

// And this is the error stream.
static std::ostream *errp = NULL;

// This is the name of the dna file we're parsing.  We keep it so we
// can print it out for error messages.
static std::string dna_filename;

////////////////////////////////////////////////////////////////////
// Defining the interface to the lexer.
////////////////////////////////////////////////////////////////////

void
dna_init_lexer(std::istream &in, std::ostream &err, const std::string &filename) {
  inp = &in;
  errp = &err;
  dna_filename = filename;
  line_number = 0;
  col_number = 0;
  error_count = 0;
  warning_count = 0;
}

int
dna_error_count() {
  return error_count;
}

int
dna_warning_count() {
  return warning_count;
}


////////////////////////////////////////////////////////////////////
// Internal support functions.
////////////////////////////////////////////////////////////////////

int
dnayywrap(void) {
  return 1;
}

void
dnayyerror(const std::string &msg) {
  (*errp) << "\nError";
  if (!dna_filename.empty()) {
    (*errp) << " in " << dna_filename;
  }
  (*errp)
    << " at line " << line_number << ", column " << col_number << ":\n"
    << current_line << "\n";
  indent(*errp, col_number-1)
    << "^\n" << msg << "\n\n" << std::flush;
  error_count++;
}

void
dnayyerror(std::ostringstream &strm) {
  std::string s = strm.str();
  dnayyerror(s);
}

void
dnayywarning(const std::string &msg) {
  (*errp)
    << "\nWarning at line " << line_number << ", column " << col_number << ":\n"
    << current_line << "\n";
  indent(*errp, col_number-1)
    << "^\n" << msg << "\n\n" << std::flush;
  warning_count++;
}

void
dnayywarning(std::ostringstream &strm) {
  std::string s = strm.str();
  dnayywarning(s);
}

// Now define a function to take input from an istream instead of a
// stdio FILE pointer.  This is flex-specific.
static void
input_chars(char *buffer, int &result, int max_size) {
  nassertv(inp != NULL);
  if (*inp) {
    inp->read(buffer, max_size);
    result = inp->gcount();
    if (result >= 0 && result < max_size) {
      // Truncate at the end of the read.
      buffer[result] = '\0';
    }

    if (line_number == 0) {
      // This is a special case.  If we are reading the very first bit
      // from the stream, copy it into the current_line array.  This
      // is because the \n.* rule below, which fills current_line
      // normally, doesn't catch the first line.
      int length = std::min(max_error_width, result);
      strncpy(current_line, buffer, length);
      current_line[length] = '\0';
      line_number++;
      col_number = 0;

      // Truncate it at the newline.
      char *end = strchr(current_line, '\n');
      if (end != NULL) {
        *end = '\0';
      }
    }

  } else {
    // End of file or I/O error.
    result = 0;
  }
}

#undef YY_INPUT
#define YY_INPUT(buffer, result, max_size) input_chars(buffer, result, max_size)

// read_char reads and returns a single character, incrementing the
// supplied line and column numbers as appropriate.  A convenience
// function for the scanning functions below.
static int
read_char(int &line, int &col) {
  int c = yyinput();
  if (c == '\n') {
    line++;
    col = 0;
  } else {
    col++;
  }
  return c;
}

// scan_quoted_string reads a string delimited by quotation marks and
// returns it.
static std::string
scan_quoted_string(char quote_mark) {
  std::string result;

  // We don't touch the current line number and column number during
  // scanning, so that if we detect an error while scanning the string
  // (e.g. an unterminated string), we'll report the error as
  // occurring at the start of the string, not at the end--somewhat
  // more convenient for the user.

  // Instead of adjusting the global line_number and col_number
  // variables, we'll operate on our own local variables for the
  // interim.
  int line = line_number;
  int col = col_number;

  int c;
  c = read_char(line, col);
  while (c != quote_mark && c != EOF) {
    // A newline is not allowed within a string unless it is escaped.
    if (c == '\n') {
      c = EOF;
      break;
    } else if (c == '\\') {
      // Backslash escapes the following character.  We also respect
      // some C conventions.
      c = read_char(line, col);
      switch (c) {
      case 'a':
        result += '\a';
        c = read_char(line, col);
        break;

      case 'n':
        result += '\n';
        c = read_char(line, col);
        break;

      case 'r':
        result += '\r';
        c = read_char(line, col);
        break;

      case 't':
        result += '\t';
        c = read_char(line, col);
        break;
        
      case EOF:
        break;

      default:
        result += c;
        c = read_char(line, col);
      }
    } else {
      result += c;
      c = read_char(line, col);
    }
  }

  if (c == EOF) {
    dnayyerror("This quotation mark is unterminated.");
  }

  line_number = line;
  col_number = col;

  return result;
}

// eat_c_comment scans past all characters up until the first */
// encountered.
static void
eat_c_comment() {
  // As above, we'll operate on our own local copies of line_number
  // and col_number within this function.

  int line = line_number;
  int col = col_number;

  int c, last_c;

  last_c = '\0';
  c = read_char(line, col);
  while (c != EOF && !(last_c == '*' && c == '/')) {
    if (last_c == '/' && c == '*') {
      std::ostringstream errmsg;
      errmsg << "This comment contains a nested /* symbol at line "
             << line << ", column " << col-1 << "--possibly unclosed?"
             << std::ends;
      dnayywarning(errmsg);
    }
    last_c = c;
    c = read_char(line, col);
  }

  if (c == EOF) {
    dnayyerror("This comment marker is unclosed.");
  }

  line_number = line;
  col_number = col;
}



// accept() is called below as each piece is pulled off and
// accepted by the lexer; it increments the current column number.
INLINE void accept() {
  col_number += yyleng;
}

%}

HEX                  (0x[0-9a-fA-F]*)
NUMERIC              ([+-]?(([0-9]+[.]?)|([0-9]*[.][0-9]+))([eE][+-]?[0-9]+)?)

%%

\n.* {
  // New line.  Save a copy of the line so we can print it out for the
  // benefit of the user in case we get an error.

  strncpy(current_line, yytext+1, max_error_width);
  current_line[max_error_width] = '\0';
  line_number++;
  col_number=0;

  // Return the whole line to the lexer, except the newline character,
  // which we eat.
  yyless(1);
}

[ \t\r] {
  // Eat whitespace.
  accept();
}

"//".* {
  // Eat C++-style comments.
  accept();
}

"/*" {
  // Eat C-style comments.
  accept();
  eat_c_comment();
}

[\[\],] {
  // Send square braces and commas as themselves.
  accept();
  return dnayytext[0];
}


"anim" {
  accept();
  return ANIM;
}

"anim_building" {
  accept();
  return ANIM_BUILDING;
}

"anim_prop" {
  accept();
  return ANIM_PROP;
}

"article" {
  accept();
  return ARTICLE;
}

"battle_cell" {
  accept();
  return BATTLE_CELL;
}

"cell_id" {
  accept();
  return CELL_ID;
}

"code" {
  accept();
  return CODE;
}

"color" {
  accept();
  return COLOR;
}

"count" {
  accept();
  return COUNT;
}

"cornice" {
  accept();
  return CORNICE;
}
"door" {
  accept();
  return DOOR;
}

"flat_building" {
  accept();
  return FLAT_BUILDING;
}

"flat_door" {
  accept();
  return FLAT_DOOR;
}

"FRONT_DOOR_POINT" {
  accept();
  return FRONT_DOOR_POINT_;
}

"group" {
  accept();
  return DNAGROUP;
}

"height" {
  accept();
  return HEIGHT;
}

"hpr" {
  accept();
  return HPR;
}

"interactive_prop" {
  accept();
  return INTERACTIVE_PROP;
}

"landmark_building" {
  accept();
  return LANDMARK_BUILDING;
}

"model" {
  accept();
  return MODEL;
}

"nhpr" {
  accept();
  return NHPR;
}

"node" {
  accept();
  return NODE;
}

"hood_model" {
  accept();
  return HOOD_MODEL;
}

"building_type" {
  accept();
  return BUILDING_TYPE;
}

"place_model" {
  accept();
  return PLACE_MODEL;
}

"pos" {
  accept();
  return POS;
}

"prop" {
  accept();
  return PROP;
}

"scale" {
  accept();
  return SCALE;
}

"sign" {
  accept();
  return SIGN;
}

"baseline" {
  accept();
  return BASELINE;
}

"indent" {
  accept();
  return INDENT;
}

"kern" {
  accept();
  return KERN;
}

"wiggle" {
  accept();
  return WIGGLE;
}

"SIDE_DOOR_POINT" {
  accept();
  return SIDE_DOOR_POINT_;
}

"STREET_POINT" {
  accept();
  return STREET_POINT_;
}

"COGHQ_IN_POINT" {
  accept();
  return COGHQ_IN_POINT_;
}

"COGHQ_OUT_POINT" {
  accept();
  return COGHQ_OUT_POINT_;
}

"stumble" {
  accept();
  return STUMBLE;
}

"stomp" {
  accept();
  return STOMP;
}

"graphic" {
  accept();
  return GRAPHIC;
}

"text" {
  accept();
  return TEXT_;
}

"letters" {
  accept();
  return LETTERS;
}

"flags" {
  accept();
  return FLAGS;
}

"store_font" {
  accept();
  return STORE_FONT;
}

"store_node" {
  accept();
  return STORE_NODE;
}

"store_suit_point" {
  accept();
  return STORE_SUIT_POINT;
}

"store_texture" {
  accept();
  return STORE_TEXTURE;
}

"street" {
  accept();
  return STREET;
}

"suit_edge" {
  accept();
  return SUIT_EDGE;
}

"texture" {
  accept();
  return TEXTURE;
}

"title" {
  accept();
  return TITLE;
}

"vis" {
  accept();
  return VIS;
}

"visgroup" {
  accept();
  return VISGROUP;
}

"windows" {
  accept();
  return WINDOWS;
}

"wall" {
  accept();
  return WALL;
}

"width" {
  accept();
  return WIDTH;
}

{NUMERIC} {
  // An integer or floating-point number.
  accept();
  dnayylval._number = atof(dnayytext);
  dnayylval._string = yytext;
  return NUMBER;
}

["] {
  // Quoted string.
  accept();
  dnayylval._string = scan_quoted_string('"');
  return STRING;
}

['] {
  // Single-quoted string.
  accept();
  dnayylval._string = scan_quoted_string('\'');
  return STRING;
}
